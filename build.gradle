buildscript {
	dependencies {
		classpath "org.kohsuke:github-api:1.322"
	}
}

plugins {
	id "fabric-loom" version "1.6-SNAPSHOT"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Mod Menu
	modApi "com.terraformersmc:modmenu:${project.modmenu_version}"

	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

base {
	archivesName = project.archives_base_name
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.20.5 (24w14a) upwards uses Java 21.
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}"}
	}
}

curseforge {
	if (ENV.CURSEFORGE_API_KEY) {
		apiKey = ENV.CURSEFORGE_API_KEY
	}

	project {
		id = "870203"
		changelogType = "html"
		changelog = file("changelog.txt")
		releaseType = "release"
		addGameVersion "1.20.6"
		addGameVersion "Fabric"

		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar"))
		addArtifact file("${project.buildDir}/libs/${archivesBaseName}-${version}-sources.jar")
		addArtifact file("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		addArtifact file("${project.buildDir}/libs/${archivesBaseName}-${version}-sources-dev.jar")

		relations {
			requiredDependency "fabric-api"
			requiredDependency "modmenu"
			requiredDependency "cloth-config"
		}
	}

	options {
		forgeGradleIntegration = false
	}
}

afterEvaluate {
	tasks.curseforge870203.dependsOn moveDevLibs
}

task moveDevLibs(dependsOn: [remapJar, remapSourcesJar]) {
	doLast {
		ant.move(file:"${project.buildDir}/devlibs/${archivesBaseName}-${version}-dev.jar", tofile:"${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar")
		ant.move(file:"${project.buildDir}/devlibs/${archivesBaseName}-${version}-sources.jar", tofile:"${project.buildDir}/libs/${archivesBaseName}-${version}-sources-dev.jar")
	}
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: moveDevLibs) {
	onlyIf {
		ENV.GITHUB_TOKEN
	}

	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repository = github.getRepository("Wurst-Imperium-MCX/ChestESP")
		def ghVersion = "v" + version.substring(0, version.indexOf("-"))

		def ghRelease = repository.getReleaseByTagName(ghVersion as String);
		if(ghRelease == null) {
			def releaseBuilder = new GHReleaseBuilder(repository, ghVersion as String)
			ghRelease = releaseBuilder.create()
		}

		ghRelease.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive");
		ghRelease.uploadAsset(remapSourcesJar.archiveFile.get().getAsFile(), "application/java-archive")
		ghRelease.uploadAsset(new File("${project.buildDir}/libs/${archivesBaseName}-${version}-dev.jar"), "application/java-archive")
		ghRelease.uploadAsset(new File("${project.buildDir}/libs/${archivesBaseName}-${version}-sources-dev.jar"), "application/java-archive")
	}
}

buildscript {
	dependencies {
		classpath "org.kohsuke:github-api:1.330"
	}
}

plugins {
	id "java-library"
	id "eclipse"
	id "idea"
	// NeoGradle. Check the latest version at:
	// https://projects.neoforged.net/neoforged/neogradle
	id "net.neoforged.gradle.userdev" version "7.0.192"
	id "net.neoforged.gradle.mixin" version "7.0.192"
	id "me.modmuss50.mod-publish-plugin" version "1.0.0"
	id "com.diffplug.spotless" version "8.0.0"
}

def ENV = System.getenv()

version = project.mod_version
group = project.mod_group_id

repositories {
	mavenLocal()
	maven {url = "https://maven.shedaniel.me/"}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

base {
	archivesName = project.mod_name.replace(" ", "-")
}

// Move the jar task output to /build/devlibs with a "-slim" suffix
jar {
	archiveClassifier = "slim"
	destinationDirectory = layout.buildDirectory.dir("devlibs")
	def archivesName = base.archivesName
	inputs.property("archivesName", archivesName)
	
	from("LICENSE.txt") {
		rename { "LICENSE-${archivesName.get()}.txt" }
	}
	
	exclude("intentionally_untranslated.json")
}

// Create a task to remove the hardcoded "-all" suffix from the jarJar output
tasks.register('renameJarJar', Sync) {
	from tasks.jarJar
	into layout.buildDirectory.dir("libs")
	rename { String fileName ->
		fileName.replace("-all", "")
	}
}

tasks.named("build").configure {
	dependsOn(tasks.named("renameJarJar"))
}

// Mojang ships Java 21 to end users starting in 1.20.5 (24w14a), so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

sourceSets {
    gametest {
        depends.on sourceSets.main
    }
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
	// applies to all the run configs below
	configureEach {
		// Recommended logging data for a userdev environment
		// The markers can be added/remove as needed separated by commas.
		// "SCAN": For mods scan.
		// "REGISTRIES": For firing of registry events.
		// "REGISTRYDUMP": For getting the contents of all registries.
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		
		// Recommended logging level for the console
		// You can set various levels here.
		// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
		systemProperty 'forge.logging.console.level', 'debug'
		
		modSource project.sourceSets.main
		arguments("--mixin.config", "chestesp.mixins.json")
	}
	
	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}
	
	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		argument '--nogui'
	}
	
	// This run config launches GameTestServer and runs all registered gametests, then exits.
	// By default, the server will crash when no gametests are provided.
	// The gametest system is also enabled by default for other run configs under the /test command.
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}
	
	clientData {
		// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
		// workingDirectory project.file('run-data')
		
		// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}

	clientGameTest {
		runType("client")
		jvmArguments("-Dchestesp.e2eTest", "-Dmixin.debug.verify=true", "-Dmixin.debug.countInjections=true")
		systemProperties("fabric.client.gametest.disableNetworkSynchronizer": "true")
		arguments("--username", "Wurst-Bot")
		workingDirectory(file("build/run/clientGameTest"))
		modSource project.sourceSets.gametest
		arguments("--mixin.config", "fabric_api.mixins.json")
		arguments("--mixin.config", "client_gametest.mixins.json")
	}
	
	clientGameTestWithLootr {
		runType("client")
		jvmArguments("-Dchestesp.e2eTest", "-Dchestesp.withLootr=true", "-Dmixin.debug.verify=true", "-Dmixin.debug.countInjections=true")
		systemProperties("fabric.client.gametest.disableNetworkSynchronizer": "true")
		arguments("--username", "Wurst-Bot")
		workingDirectory(file("build/run/clientGameTestWithLootr"))
		modSource project.sourceSets.gametest
		arguments("--mixin.config", "fabric_api.mixins.json")
		arguments("--mixin.config", "client_gametest.mixins.json")
	}
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime
	lootrMod {
		transitive = false
	}
}

configurations.all {
	resolutionStrategy {
		// v2.5.1, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2024-57699
		force "net.minidev:json-smart:2.5.2"
		// v2.13.4, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2025-52999
		force "com.fasterxml.jackson.core:jackson-core:2.15.0"
		// v3.17.0, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2025-48924
		force "org.apache.commons:commons-lang3:3.18.0"
		// v9.40, used by Minecraft 1.21.4 - 1.21.10, is vulnerable to CVE-2025-53864
		force "com.nimbusds:nimbus-jose-jwt:10.0.2"
		// v4.1.118.Final, used by Minecraft 1.21.5 - 1.21.10, is vulnerable to CVE-2025-58057
		force "io.netty:netty-codec:4.1.125.Final"
		// v4.1.118.Final, used by Minecraft 1.21.5 - 1.21.10, is vulnerable to CVE-2025-58056
		force "io.netty:netty-codec-http:4.1.125.Final"
	}
}

dependencies {
	// Specify the version of Minecraft to use.
	// Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
	// The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
	// You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
	// And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
	// For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
	implementation "net.neoforged:neoforge:${neo_version}"
	
	// Example optional mod dependency with JEI
	// The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
	// compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
	// compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
	// We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
	// localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
	
	// Example mod dependency using a mod jar from ./libs with a flat dir repository
	// This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
	// The group id is ignored when searching -- in this case, it is "blank"
	// implementation "blank:coolmod-${mc_version}:${coolmod_version}"
	
	// Example mod dependency using a file as dependency
	// implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")
	
	// Example project dependency using a sister or child project:
	// implementation project(":myproject")
	
	// For more info:
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
	
	// Cloth Config
	api("me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}")
	jarJar("me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}")
	
	// Lootr for testing
	lootrMod "maven.modrinth:lootr:${project.lootr_version}"
	
	constraints {
		api("org.yaml:snakeyaml:2.2") {
			because "version 1.27 pulled from cloth-config has security vulnerabilities"
		}
		api("com.google.code.gson:gson:2.11.0") {
			because "version 2.8.1 pulled from cloth-config has security vulnerabilities"
		}
	}
}

// Enable jarJar feature so Cloth Config can be embedded in the final jar
jarJar.enable()

def cleanClientGameTest = tasks.register("cleanClientGameTest", Delete) {
	delete layout.buildDirectory.dir("run/clientGameTest")
}

def prepareClientGameTest = tasks.register("prepareClientGameTest") {
	dependsOn cleanClientGameTest
	def outputDir = layout.buildDirectory.dir("run/clientGameTest")
	outputs.dir(outputDir)
	doLast {
		outputDir.get().asFile.mkdirs()
	}
}

tasks.matching { it.name == "runClientGameTest" }.configureEach {
	dependsOn prepareClientGameTest
}

def cleanClientGameTestWithLootr = tasks.register("cleanClientGameTestWithLootr", Delete) {
	delete layout.buildDirectory.dir("run/clientGameTestWithLootr")
}

def prepareClientGameTestWithLootr = tasks.register("prepareClientGameTestWithLootr", Sync) {
	dependsOn cleanClientGameTestWithLootr
	from configurations.lootrMod
	into layout.buildDirectory.dir("run/clientGameTestWithLootr/mods")
}

def doLootrTest = providers.gradleProperty("do_lootr_test").map { it.toBoolean() }.orElse(false)
tasks.matching { it.name == "runClientGameTestWithLootr" }.configureEach {
	onlyIf { doLootrTest.get() }
	dependsOn prepareClientGameTestWithLootr
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version         : minecraft_version,
			minecraft_version_range   : minecraft_version_range,
			neo_version               : neo_version,
			neo_version_range         : neo_version_range,
			loader_version_range      : loader_version_range,
			mod_id                    : mod_id,
			mod_name                  : mod_name,
			mod_license               : mod_license,
			mod_version               : mod_version,
			mod_authors               : mod_authors,
			mod_description           : mod_description,
			cloth_config_version_range: cloth_config_version_range
	]
	inputs.properties replaceProperties
	
	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

import com.diffplug.spotless.generic.LicenseHeaderStep
spotless {
	lineEndings = "WINDOWS"
	java {
		removeUnusedImports()
		leadingSpacesToTabs()
		trimTrailingWhitespace()
		eclipse().configFile(file("codestyle/formatter.xml"))
	}
	format("licenseHeader") {
		target("src/main/java/**/*.java", "src/test/java/**/*.java", "src/gametest/java/net/wimods/**/*.java")
		def header_file = file("codestyle/license_header.txt")
		def delimiter = LicenseHeaderStep.DEFAULT_JAVA_HEADER_DELIMITER
		licenseHeaderFile(header_file, delimiter).updateYearWithLatest(true)
	}
	json {
		target "src/**/*.json"
		gson().indentWithSpaces(2).version("2.11.0")
	}
}

def getGhVersion() {
	return "v" + version.substring(0, version.indexOf("-MC"))
}

def getChangelogLink(String platform, String from) {
	def modSlug = project.archives_base_name.toLowerCase()
	def versionSlug = getGhVersion().substring(1).replace(".", "-")
	def shortURL = "https://www.wimods.net/${modSlug}/${modSlug}-${versionSlug}/"
	def query = []
	if (platform != "GitHub")
		query.add("mc=${project.minecraft_version}")
	query.add("utm_source=${platform}")
	query.add("utm_medium=" + project.archives_base_name.replace("-", "+"))
	def fullURL = shortURL + (query.isEmpty() ? "" : "?" + query.join("&"))
	def encodedURL = java.net.URLEncoder.encode(fullURL, "UTF-8")
	return "[${shortURL}](https://go.wimods.net/from/${from}?to=${encodedURL})"
}

def getChangelogImage(String from) {
	return "![](https://img.wimods.net/${from})"
}

def getChangelog(String platform, String from) {
	def prefix = platform == "GitHub" ? "" : "A changelog can be found at: "
	def imgQuery = platform == "GitHub" ? "" : "?mc_version=${project.minecraft_version}&mod_loader=${project.mod_loader}"
	return prefix + getChangelogLink(platform, from) + getChangelogImage(from + imgQuery)
}

publishMods {
	def version = project.version
	def archivesName = base.archivesName.get()
	def modSlug = archivesName.toLowerCase()
	
	type = getGhVersion().contains("pre") ? BETA : STABLE
	modLoaders.add(project.mod_loader.toLowerCase())
	file = tasks.named("renameJarJar").flatMap { task ->
		def libsDir = layout.buildDirectory.dir("libs").get().asFile
		def jarFiles = libsDir.listFiles().findAll { it.name.endsWith(".jar") }
		layout.file(providers.provider { jarFiles[0] })
	}
	
	curseforge {
		projectId = project.cf_project_id
		accessToken = providers.environmentVariable("CURSEFORGE_API_KEY")
		minecraftVersions.add(project.cf_game_version)
		embeds("cloth-config")
		changelog = getChangelog("CurseForge", "curseforge.com/minecraft/mc-mods/${modSlug}/version/${version}")
	}
}

import groovy.json.JsonSlurper

tasks.register("getCurseforgeId") {
	inputs.file publishCurseforge.result
	doLast {
		def result = new JsonSlurper().parseText(publishCurseforge.result.get().asFile.text)
		println "CURSEFORGE_FILE_ID=${result.fileId}"
	}
}

tasks.named("publishMods").configure {
	dependsOn(tasks.named("build"))
}

tasks.named("publishCurseforge").configure {
	dependsOn(tasks.named("build"))
}

tasks.named("getCurseforgeId").configure {
	dependsOn(tasks.named("publishCurseforge"))
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github {
	dependsOn tasks.named("renameJarJar")
	
	onlyIf {
		ENV.GITHUB_TOKEN
	}
	
	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repoId = project.mcx_repo_id
		def repository = github.getRepository(repoId)
		def ghVersion = getGhVersion()
		
		def ghRelease = repository.getReleaseByTagName(ghVersion as String)
		if(ghRelease == null) {
			def releaseBuilder = new GHReleaseBuilder(repository, ghVersion as String)
			releaseBuilder.body(getChangelogImage("github.com/${repoId}/releases/tag/${ghVersion}"))
			releaseBuilder.prerelease(ghVersion.contains("pre"))
			ghRelease = releaseBuilder.create()
		}
		
		def libsDir = layout.buildDirectory.dir("libs").get().asFile
		def jarFiles = libsDir.listFiles().findAll { it.name.endsWith(".jar") }
		File publishJar = jarFiles[0]
		
		ghRelease.uploadAsset(publishJar, "application/java-archive")
	}
}

import org.kohsuke.github.GHIssueState
import org.kohsuke.github.GHMilestoneState
import java.time.Instant

task closeMilestone {
	onlyIf {
		ENV.GITHUB_TOKEN
	}
	
	doLast {
		def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
		def repoId = project.gh_repo_id
		def repository = github.getRepository(repoId)
		def ghVersion = getGhVersion()
		
		// Weird API design: listMilestones() requires GHIssueState while everything else uses GHMilestoneState.
		def milestone = repository.listMilestones(GHIssueState.ALL).find { it.title == ghVersion }
		if (milestone == null) {
			milestone = repository.createMilestone(ghVersion, "")
		}
		
		if (milestone.getState() != GHMilestoneState.CLOSED) {
			milestone.setDueOn(Date.from(Instant.now()))
			milestone.setDescription(getChangelog("GitHub", "github.com/${repoId}/milestone/${ghVersion}"))
			milestone.close()
		}
	}
}

task uploadBackups {
	dependsOn tasks.named("renameJarJar")
	
	onlyIf {
		ENV.WI_BACKUPS_API_KEY
	}
	
	doLast {
		def shortVersion = getGhVersion().substring(1)
		def backupUrl = "https://api.wurstclient.net/artifact-backups/ChestESP/${shortVersion}"
		
		def maxRetries = 3
		def retryCount = 0
		def success = false
		
		while (!success && retryCount < maxRetries) {
			try {
				def connection = new URL(backupUrl).openConnection() as HttpURLConnection
				def boundary = UUID.randomUUID().toString()
				connection.setRequestMethod("POST")
				connection.setRequestProperty("X-API-Key", ENV.WI_BACKUPS_API_KEY)
				connection.setRequestProperty("Accept", "application/json")
				connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=$boundary")
				connection.doOutput = true
				
				def output = connection.outputStream
				def libsDir = layout.buildDirectory.dir("libs").get().asFile
				def jarFiles = libsDir.listFiles().findAll { it.name.endsWith(".jar") }
				
				jarFiles.each { file ->
					output << "--${boundary}\r\n"
					output << "Content-Disposition: form-data; name=\"files\"; filename=\"${file.name}\"\r\n"
					output << "Content-Type: application/java-archive\r\n\r\n"
					file.withInputStream { input -> 
						output << input
					}
					output << "\r\n"
				}
				output << "--${boundary}--\r\n"
				output.flush()
				
				if(connection.responseCode != 200) {
					throw new IOException("HTTP ${connection.responseCode}: ${connection.responseMessage}")
				}
				
				success = true
				
			} catch (Exception e) {
				retryCount++
				if (retryCount >= maxRetries) {
					throw new GradleException("Failed to upload backups after ${maxRetries} attempts: ${e.message}")
				}
				println "Upload attempt ${retryCount} failed: ${e.message}. Retrying in 5 seconds..."
				Thread.sleep(5000)
			}
		}
	}
}
